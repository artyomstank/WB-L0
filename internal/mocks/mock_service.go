// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "L0-wb/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, order)
}

// GetOrderByUID mocks base method.
func (m *MockService) GetOrderByUID(ctx context.Context, orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUID", ctx, orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUID indicates an expected call of GetOrderByUID.
func (mr *MockServiceMockRecorder) GetOrderByUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUID", reflect.TypeOf((*MockService)(nil).GetOrderByUID), ctx, orderUID)
}

// GetOrderResponse mocks base method.
func (m *MockService) GetOrderResponse(ctx context.Context, orderUID string) (*models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderResponse", ctx, orderUID)
	ret0, _ := ret[0].(*models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderResponse indicates an expected call of GetOrderResponse.
func (mr *MockServiceMockRecorder) GetOrderResponse(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderResponse", reflect.TypeOf((*MockService)(nil).GetOrderResponse), ctx, orderUID)
}

// RestoreCache mocks base method.
func (m *MockService) RestoreCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreCache indicates an expected call of RestoreCache.
func (mr *MockServiceMockRecorder) RestoreCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCache", reflect.TypeOf((*MockService)(nil).RestoreCache), ctx)
}

// SaveOrder mocks base method.
func (m *MockService) SaveOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockServiceMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockService)(nil).SaveOrder), ctx, order)
}
