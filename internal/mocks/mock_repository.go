// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repository_interface.go

package mocks

import (
	models "L0-wb/internal/models"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// CreateDeliveryTx mocks base method.
func (m *MockRepository) CreateDeliveryTx(ctx context.Context, tx *sql.Tx, del models.Delivery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliveryTx", ctx, tx, del)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliveryTx indicates an expected call of CreateDeliveryTx.
func (mr *MockRepositoryMockRecorder) CreateDeliveryTx(ctx, tx, del interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliveryTx", reflect.TypeOf((*MockRepository)(nil).CreateDeliveryTx), ctx, tx, del)
}

// CreateItemTx mocks base method.
func (m *MockRepository) CreateItemTx(ctx context.Context, tx *sql.Tx, item models.Item, orderUID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemTx", ctx, tx, item, orderUID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItemTx indicates an expected call of CreateItemTx.
func (mr *MockRepositoryMockRecorder) CreateItemTx(ctx, tx, item, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemTx", reflect.TypeOf((*MockRepository)(nil).CreateItemTx), ctx, tx, item, orderUID)
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, order)
}

// CreatePaymentTx mocks base method.
func (m *MockRepository) CreatePaymentTx(ctx context.Context, tx *sql.Tx, pay models.Payment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentTx", ctx, tx, pay)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentTx indicates an expected call of CreatePaymentTx.
func (mr *MockRepositoryMockRecorder) CreatePaymentTx(ctx, tx, pay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentTx", reflect.TypeOf((*MockRepository)(nil).CreatePaymentTx), ctx, tx, pay)
}

// GetDelivery mocks base method.
func (m *MockRepository) GetDelivery(ctx context.Context, deliveryID int) (models.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelivery", ctx, deliveryID)
	ret0, _ := ret[0].(models.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelivery indicates an expected call of GetDelivery.
func (mr *MockRepositoryMockRecorder) GetDelivery(ctx, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelivery", reflect.TypeOf((*MockRepository)(nil).GetDelivery), ctx, deliveryID)
}

// GetItemsByOrderUID mocks base method.
func (m *MockRepository) GetItemsByOrderUID(ctx context.Context, orderUID string) (models.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByOrderUID", ctx, orderUID)
	ret0, _ := ret[0].(models.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByOrderUID indicates an expected call of GetItemsByOrderUID.
func (mr *MockRepositoryMockRecorder) GetItemsByOrderUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByOrderUID", reflect.TypeOf((*MockRepository)(nil).GetItemsByOrderUID), ctx, orderUID)
}

// GetLastOrders mocks base method.
func (m *MockRepository) GetLastOrders(ctx context.Context, lim int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOrders", ctx, lim)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOrders indicates an expected call of GetLastOrders.
func (mr *MockRepositoryMockRecorder) GetLastOrders(ctx, lim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOrders", reflect.TypeOf((*MockRepository)(nil).GetLastOrders), ctx, lim)
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(ctx context.Context, orderUID string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderUID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), ctx, orderUID)
}

// GetPayment mocks base method.
func (m *MockRepository) GetPayment(ctx context.Context, paymentID int) (models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, paymentID)
	ret0, _ := ret[0].(models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockRepositoryMockRecorder) GetPayment(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockRepository)(nil).GetPayment), ctx, paymentID)
}
